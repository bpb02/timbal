"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[744],{5981:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/memory","title":"Memory in LLMs","description":"Timbal makes it easy to manage conversation memory in your graph. These how-to guides show how to implement different strategies for that.","source":"@site/docs/guides/memory.md","sourceDirName":"guides","slug":"/guides/memory","permalink":"/docs/guides/memory","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar":"docsSidebar"}}');var o=s(4848),a=s(8453);const t={sidebar:"docsSidebar"},r="Memory in LLMs",m={},l=[{value:"Memory Management",id:"memory-management",level:2},{value:"Memory Sharing",id:"memory-sharing",level:3},{value:"Memory Window Size",id:"memory-window-size",level:3},{value:"Memory and State Saving",id:"memory-and-state-saving",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"memory-in-llms",children:"Memory in LLMs"})}),"\n",(0,o.jsx)(n.p,{children:"Timbal makes it easy to manage conversation memory in your graph. These how-to guides show how to implement different strategies for that.\nMemory in Timbal allows LLMs to maintain context across interactions."}),"\n",(0,o.jsx)(n.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,o.jsx)(n.p,{children:"We have seen how to add an LLM."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'flow = (\n    Flow()\n    .add_llm(id="chat_llm")\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This will be a possible result of conversation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# First message\n\nuser: "Hi! My name is David"\n\nassistant: "Hi David! How can I help you?"\n\n# Second message\n\nuser: "What is my name?"\n\nassistant: "I\'m sorry I don\'t have access to know what is your name."\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Why it doesn't know the name if I provided it before? This is because this LLM does not have memory... Let's provide it a memory:"}),"\n",(0,o.jsxs)(n.p,{children:["Only adding in ",(0,o.jsx)(n.code,{children:"memory_id"}),"the name of the ",(0,o.jsx)(n.code,{children:"id"}),", you are setting it as to have memory."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'flow = (\n    Flow()\n    .add_llm(id="chat_llm", memory_id="chat_llm")\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now the same conversation will look like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# First message\n\nuser: "Hi! My name is David"\n\nassistant: "Hi David! How can I help you?"\n\n# Second message\n\nuser: "What is my name?"\n\nassistant: "Your name is David. How can I assist you today?"\n\n'})}),"\n",(0,o.jsx)(n.admonition,{title:"ALERT",type:"warning",children:(0,o.jsxs)(n.p,{children:["In this version the ",(0,o.jsx)(n.code,{children:"memory_id"})," has to have the ",(0,o.jsx)(n.code,{children:"id"})," name of a llm!"]})}),"\n",(0,o.jsx)(n.h3,{id:"memory-sharing",children:"Memory Sharing"}),"\n",(0,o.jsx)(n.p,{children:"Let's see what happens"}),"\n",(0,o.jsxs)(n.p,{children:["LLMs can share memory by using the same ",(0,o.jsx)(n.code,{children:"memory_id"}),". This is useful when you want multiple LLMs to have access to the same conversation history:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'flow = (\n    Flow()\n    # Both LLMs share the same memory\n    .add_llm(id="llm1", memory_id="shared_memory")\n    .add_llm(id="llm2", memory_id="shared_memory")\n    )\n'})}),"\n",(0,o.jsx)(n.p,{children:"Memory sharing is particularly useful in agent scenarios where you want the agent to maintain context across different interactions."}),"\n",(0,o.jsx)(n.p,{children:"But if we hae a lot of interaction, the memory will be huge!"}),"\n",(0,o.jsx)(n.p,{children:"No problem! We can limit the memory window size."}),"\n",(0,o.jsx)(n.h3,{id:"memory-window-size",children:"Memory Window Size"}),"\n",(0,o.jsx)(n.p,{children:"Let's see an example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'flow = (\n    Flow()\n    .add_llm(id="chat_llm", memory_id="chat_llm", memory_window_size=5)\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"So in this case, the memory will be limited to the last 5 messages."}),"\n",(0,o.jsx)(n.p,{children:"And if we set a window size of 0? The memory will be limited to the last 0 messages. So... no memory!"}),"\n",(0,o.jsx)(n.h2,{id:"memory-and-state-saving",children:"Memory and State Saving"}),"\n",(0,o.jsx)(n.p,{children:"When using a state saver, memory persists between flow executions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'flow = (\nFlow()\n.add_llm(memory_id="persistent_memory")\n.compile(state_saver=InMemorySaver())\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This allows conversations to continue across multiple flow runs while respecting the configured window sizes."}),"\n",(0,o.jsxs)(n.p,{children:["See more about state savers in the ",(0,o.jsx)(n.a,{href:"/docs/guides/saver",children:"Saver"})," guide."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var i=s(6540);const o={},a=i.createContext(o);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);