"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9552],{7213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"get-started/quickstart","title":"Quickstart","description":"Build your first flow with Timbal with 5 lines of code.","source":"@site/docs/get-started/quickstart.md","sourceDirName":"get-started","slug":"/get-started/quickstart","permalink":"/timbal/docs/get-started/quickstart","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar":"docsSidebar"},"sidebar":"docsSidebar","previous":{"title":"Installation","permalink":"/timbal/docs/get-started/installation"},"next":{"title":"Model Capabilities","permalink":"/timbal/docs/get-started/model_capabilities"}}');var s=n(4848),a=n(8453);const o={sidebar_position:2,sidebar:"docsSidebar"},r="Quickstart",l={},c=[{value:"Part 1: Build a Simple Chatbot",id:"part-1-build-a-simple-chatbot",level:2},{value:"Part 2: Enhancing the Chatbot with Tools",id:"part-2-enhancing-the-chatbot-with-tools",level:2},{value:"Part 3: Enhancing the Chatbot with Memory",id:"part-3-enhancing-the-chatbot-with-memory",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,s.jsx)("h2",{className:"subtitle",style:{marginTop:"-17px",fontSize:"1.2rem",fontWeight:"normal"},children:(0,s.jsx)(t.p,{children:"Build your first flow with Timbal with 5 lines of code."})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(t.p,{children:["We'll start implementing an ",(0,s.jsx)(t.strong,{children:"agent"}),". It will be a ",(0,s.jsx)(t.strong,{children:"simple chatbot"})," and gradually enhance it with advanced features. Let's dive in!"]}),"\n",(0,s.jsxs)(t.p,{children:["Before moving forward, ensure you've completed the installation of Timbal. If you haven't set it up yet, follow the ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"./installation",children:"installation guide"})})," to get started."]}),"\n",(0,s.jsx)(t.h2,{id:"part-1-build-a-simple-chatbot",children:"Part 1: Build a Simple Chatbot"}),"\n",(0,s.jsx)(t.p,{children:"\ud83d\udee0 Let's create a simple chatbot that can respond to user messages."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["1. Import the class ",(0,s.jsx)(t.code,{children:"Flow"})," from the ",(0,s.jsx)(t.code,{children:"timbal"})," package."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"from timbal import Agent\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["2. Initialize a ",(0,s.jsx)(t.code,{children:"Flow"})," object."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"flow = Agent()\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"3. Set your environment variables"}),"\nBefore running your flow, make sure you have the keys needed set as environment variables in your ",(0,s.jsx)(t.code,{children:".env"})," file:"]}),"\n",(0,s.jsx)(t.p,{children:"\ud83d\udc40 It will depend on the LLM you're using, in this case, the default model is OpenAI."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title=".env"',children:"OPENAI_API_KEY=your_api_key_here\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Only with the ",(0,s.jsx)(t.code,{children:"Agent"})," class we have a flow that represents a llm that receives a ",(0,s.jsx)(t.code,{children:"prompt"})," and returns a ",(0,s.jsx)(t.code,{children:"response"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Now let's run the chatbot!"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:'response = flow.complete(prompt="What is the capital of Germany?")\nprint(response.content[0].text)\n'})}),"\n",(0,s.jsx)(t.p,{children:"You will see an output like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"The capital of Germany is Berlin.\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Congratulations!",type:"tip",children:(0,s.jsx)(t.p,{children:"You've just created your first Timbal flow!"})}),"\n",(0,s.jsx)(t.p,{children:"This is the simplest flow you can create."}),"\n",(0,s.jsx)(t.p,{children:"You can modify it as you want. For example, you can add tools to the agent."}),"\n",(0,s.jsx)(t.h2,{id:"part-2-enhancing-the-chatbot-with-tools",children:"Part 2: Enhancing the Chatbot with Tools"}),"\n",(0,s.jsx)(t.p,{children:"When the chatbot encounters questions it can't answer from memory, we'll equip it with a tool. This allows the bot to fetch relevant information in real time, improving its responses."}),"\n",(0,s.jsx)(t.p,{children:"For this example, we will use a tool capable of returning the current weather."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["1. We have a ",(0,s.jsx)(t.code,{children:"search"})," tool defined."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"from timbal.steps.perplexity import search\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"2. Add an agent node to the flow with the tool."}),"\nWe need to add the tool to the llm as a new node."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"flow = Agent(tools=[search])\n"})}),"\n",(0,s.jsx)(t.p,{children:"Let's visualize the graph we've built."}),"\n",(0,s.jsx)(t.admonition,{title:"Visualize the flow",type:"tip",children:(0,s.jsxs)(t.p,{children:["You can visualize the flow by calling ",(0,s.jsx)(t.code,{children:"flow.plot()"}),"."]})}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("img",{src:"/timbal/img/dag_tools.png",style:{width:"50%"}})}),"\n",(0,s.jsx)(t.p,{children:"But it does not retain the conversation:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"user: My name is David\nassistant: Hello David, how can I help you today?\nuser: What is my name?\nassistant: I don't know but you can tell me.\n"})}),"\n",(0,s.jsx)(t.p,{children:"Let's add memory to the chatbot."}),"\n",(0,s.jsx)(t.h2,{id:"part-3-enhancing-the-chatbot-with-memory",children:"Part 3: Enhancing the Chatbot with Memory"}),"\n",(0,s.jsx)(t.p,{children:"Let's add memory to the chatbot."}),"\n",(0,s.jsx)(t.p,{children:"It is very simple, we just need to set a context."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"from timbal.state.savers import InMemorySaver\nstate_saver = InMemorySaver()\n\nflow = Agent(\n    state_saver=state_saver\n)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["And when we run the flow we have to add the ",(0,s.jsx)(t.code,{children:"RunContext()"})," parameter. In order to have the tracebility of that run and the previous."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="flow.py"',children:"run_context = RunContext()\nflow_output_event = await agent.complete(context=run_context, prompt=prompt)\nrun_context = RunContext(parent_id=flow_output_event.run_id)\n"})}),"\n",(0,s.jsx)(t.p,{children:"And the previous conversation will look like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"user: My name is David\nassistant: Hello David, how can I help you today?\nuser: What is my name?\nassistant: Your name is David. Do you need anything else?\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"That's it!"})," With 5 lines of code we've created a chatbot that has memory and can search internet."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);